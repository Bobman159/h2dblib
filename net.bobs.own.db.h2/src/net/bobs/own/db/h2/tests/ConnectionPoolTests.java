package net.bobs.own.db.h2.tests;

import java.sql.Connection;
import java.sql.SQLException;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import net.bobs.own.db.h2.pool.H2ConnectionPoolFactory;
import net.bobs.own.db.h2.pool.IH2ConnectionPool;


/**
 * Simple JUnit tests to verify 
 *    *  H2MyOwnConnectionPool can create and obtain connections to a sample database.
 *       <b> Connections are only validated to be not null </b>
 *    *  H2HikariConnectionPool can create and obtain connections to a sample database using HikariCP
 *       connection pooling.
 *       <b> Connections are only validated to be not null </b>
 *       
 *    *  URL testing is only done with file: because platform: is specific to Eclipse/OSGI and can't 
 *       easily be tested.
 *              
 * @author Robert Anderson
 *
 */
 public class ConnectionPoolTests {
   
   //TODO: Create additional JUnit tests to improve code coverage 
   //    *  net.bobs.own.db.h2.db
   //       *  AutoGeneratedKeysList, AutoGeneratedKeysResult, H2AbstaractDatabaseServce
   //    *  net.bobs.own.db.h2.exceptions
   //       *  H2DBServiceException
   //    *  net.bobs.own.db.h2.pool
   //       *  H2ConnectionPoolFactory, H2ConnectionPoolPreferences, H2Database, H2MyOwnConnectionPool

   /* EZMenu */
   //URL Test - I can only test with file URL because platform:/ is specific to Eclipse
   //Test with platform:/ URL should receive malformed URL exception -> "Unknown protocol platform:\ or similar 
    static final String MYOWN_PATH_FILE_URL="file:/C:\\Users\\Robert Anderson\\git\\h2dblib\\net.bobs.own.db.h2\\tests_config" +
                                            "\\cp_testb_myown.properties";
    static final String MYOWN_PATH_URL="/Users/Robert Anderson/git/h2dblib/net.bobs.own.db.h2/tests_config/" + 
                                       "/cp_testb_myown.properties";
    static final String MYOWN_PATH_FILE="C:\\Users\\Robert Anderson\\git\\h2dblib\\net.bobs.own.db.h2\\tests_config" +
                                        "\\cp_testb_myown.properties";
    //final String MYOWN_PATH_URL="platform:/plugin/net.bobs.own.db.h2.tests/tests_config/cp_testb.properties";

    static final String HIKARI_PATH_URL="/Users/Robert Anderson/git/h2dblib/net.bobs.own.db.h2/tests_config/cp_testb_hikari.properties";
    static final String HIKARI_PATH_FILE="C:\\Users\\Robert Anderson\\git\\h2dblib\\net.bobs.own.db.h2\\tests_config\\" +
                                          "cp_testb_hikari.properties";
   
   private static Logger logger = LogManager.getLogger(ConnectionPoolTests.class.getName());
  
   @BeforeAll
   static void setUpBeforeClass() throws Exception {
   }

   @AfterAll
   static void tearDownAfterClass() throws Exception {
   }

   @BeforeEach
   void setUp() throws Exception {
   }

   @AfterEach
   void tearDown() throws Exception {
   }

   @Test
   void myownURLTest() {

      logger.debug("myownURLTest started");
      IH2ConnectionPool pool = H2ConnectionPoolFactory.getInstance()
                                                       .makePool(H2ConnectionPoolFactory.PoolTypes.MYOWN, 
                                                                 "cptestb.myown",MYOWN_PATH_FILE_URL);
      
      IH2ConnectionPool pool2 = H2ConnectionPoolFactory.getInstance()
            .makePool(H2ConnectionPoolFactory.PoolTypes.MYOWN, 
                      "cptestb2.myown",MYOWN_PATH_URL);

      
      try {
         Connection connPool = pool.getConnection();
         Connection connPoola = pool.getConnection();
         Assertions.assertNotNull(connPool,"connPool connection is NULL");
         Assertions.assertNotNull(connPoola,"connPoola connection is NULL");
         pool2.releaseConnection(connPool);
         pool2.releaseConnection(connPoola);
         pool2.closePool();
         
         Connection connPool2 = pool2.getConnection();
         Assertions.assertNotNull(connPool2,"connPool2 connection is NULL");
         Connection connPool2a = pool2.getConnection();
         Assertions.assertNotNull(connPool2a,"connPool2a connection is NULL");
         pool2.releaseConnection(connPool2);
         pool2.releaseConnection(connPool2a);
         pool2.closePool();
      } catch (SQLException sqlex) {
         logger.error(sqlex.getMessage(), sqlex);
      }
   }
   
   @Test
   void myownPropertiesFileTest() {

      logger.debug("myownPropertiesFileTest started");
      IH2ConnectionPool pool = H2ConnectionPoolFactory.getInstance()
                                                       .makePool(H2ConnectionPoolFactory.PoolTypes.MYOWN, 
                                                                 "cptestb.myown",MYOWN_PATH_FILE);
      
      IH2ConnectionPool pool2 = H2ConnectionPoolFactory.getInstance()
            .makePool(H2ConnectionPoolFactory.PoolTypes.MYOWN, 
                      "cptestb2.myown",MYOWN_PATH_FILE);
      
      try {
         Connection connPool = pool.getConnection();
         Connection connPoola = pool.getConnection();
         Assertions.assertNotNull(connPool,"connPool connection is NULL");
         Assertions.assertNotNull(connPoola,"connPoola connection is NULL");
         pool2.releaseConnection(connPool);
         pool2.releaseConnection(connPoola);
         pool2.closePool();
         
         Connection connPool2 = pool2.getConnection();
         Assertions.assertNotNull(connPool2,"connPool2 connection is NULL");
         Connection connPool2a = pool2.getConnection();
         Assertions.assertNotNull(connPool2a,"connPool2a connection is NULL");
         pool2.releaseConnection(connPool2);
         pool2.releaseConnection(connPool2a);
         pool2.closePool();
      } catch (SQLException sqlex) {
         logger.error(sqlex.getMessage(), sqlex);
      }
   }
   
   @Test
   void myownConfigurationTest() {
      logger.debug("myownConfigurationTest started");
      IH2ConnectionPool pool = H2ConnectionPoolFactory.getInstance()
            .makePool(H2ConnectionPoolFactory.PoolTypes.MYOWN,
                      "D:\\Java\\EzMenu_Workspace\\net.bobs.own.db.h2\\db\\testa", 
                      "sa", null, "5", "cptestb.myown");

//      create user testbUser password 'Abcd1234';
      IH2ConnectionPool pool2 = H2ConnectionPoolFactory.getInstance()
            .makePool(H2ConnectionPoolFactory.PoolTypes.MYOWN, 
                      "D:\\Java\\EzMenu_Workspace\\net.bobs.own.db.h2\\db\\testb", 
                      "testbUser", "Abcd1234", "10", "cptestb2.myown");
      
      try {
      Connection connPool = pool.getConnection();
      Connection connPoola = pool.getConnection();
      Assertions.assertNotNull(connPool,"connPool connection is NULL");
      Assertions.assertNotNull(connPoola,"connPoola connection is NULL");
      pool.releaseConnection(connPool);
      pool.releaseConnection(connPoola);
      pool.closePool();
      
      Connection connPool2 = pool2.getConnection();
      Assertions.assertNotNull(connPool2,"connPool2 connection is NULL");
      Connection connPool2a = pool2.getConnection();
      Assertions.assertNotNull(connPool2a,"connPool2a connection is NULL");
      pool2.releaseConnection(connPool2);
      pool2.releaseConnection(connPool2a);
      pool2.closePool();
      } catch (SQLException sqlex) {
      logger.error(sqlex.getMessage(), sqlex);
      }
      
   }
  
   @Test
   void hikaricpURLTest() {

//      System.out.println(new File("../../../ggla/samples/obj/linux_x86")
//            .getCanonicalPath());
      
      logger.debug("hikaricpURLTest started");
      IH2ConnectionPool pool = H2ConnectionPoolFactory.getInstance()
                        .makePool(H2ConnectionPoolFactory.PoolTypes.HIKARICP, 
                                  "cptestb.hikari",
//                                HIKARI_PATH_URL);
                                  "/Users/Robert Anderson/git/h2dblib/net.bobs.own.db.h2/tests_config/cp_testb_hikari.properties");
      
      IH2ConnectionPool pool2 = H2ConnectionPoolFactory.getInstance()
                                                       .makePool(H2ConnectionPoolFactory.PoolTypes.HIKARICP, 
                                                                 "cptestb2.hikari",HIKARI_PATH_URL);
      
      try {
         Connection connPool = pool.getConnection();
         Connection connPoola = pool.getConnection();
         Assertions.assertNotNull(connPool,"connPool connection is NULL");
         Assertions.assertNotNull(connPoola,"connPoola connection is NULL");
         pool.releaseConnection(connPool);
         pool.releaseConnection(connPoola);
         pool.closePool();
         
         Connection connPool2 = pool2.getConnection();
         Assertions.assertNotNull(connPool2,"connPool2 connection is NULL");
         Connection connPool2a = pool2.getConnection();
         Assertions.assertNotNull(connPool2a,"connPool2a connection is NULL");
         pool2.releaseConnection(connPool2);
         pool2.releaseConnection(connPool2a);
         pool2.closePool();
      } catch (SQLException sqlex) {
         logger.error(sqlex.getMessage(), sqlex);
      }
   }
   
   @Test
   void hikaricpPropertiesFileTest() {

      logger.debug("hikaricpPropertiesFileTest started");
      IH2ConnectionPool pool = H2ConnectionPoolFactory.getInstance()
                                                       .makePool(H2ConnectionPoolFactory.PoolTypes.HIKARICP, 
                                                                 "cptestb.hikari",
                                                                 HIKARI_PATH_FILE);
      
      IH2ConnectionPool pool2 = H2ConnectionPoolFactory.getInstance()
                                                       .makePool(H2ConnectionPoolFactory.PoolTypes.HIKARICP, 
                                                                 "cptestb2.hikari",HIKARI_PATH_FILE);
      
      try {
         Connection connPool = pool.getConnection();
         Connection connPoola = pool.getConnection();
         Assertions.assertNotNull(connPool,"connPool connection is NULL");
         Assertions.assertNotNull(connPoola,"connPoola connection is NULL");
         pool.releaseConnection(connPool);
         pool.releaseConnection(connPoola);
         pool.closePool();
         
         Connection connPool2 = pool2.getConnection();
         Assertions.assertNotNull(connPool2,"connPool2 connection is NULL");
         Connection connPool2a = pool2.getConnection();
         Assertions.assertNotNull(connPool2a,"connPool2a connection is NULL");
         pool2.releaseConnection(connPool2);
         pool2.releaseConnection(connPool2a);
         pool2.closePool();
      } catch (SQLException sqlex) {
         logger.error(sqlex.getMessage(), sqlex);
      }
   }
   
   @Test
   void hikaricpConfigurationTest() {
      
      logger.debug("hikaricpConfigurationTest started");
      IH2ConnectionPool pool = H2ConnectionPoolFactory.getInstance()
            .makePool(H2ConnectionPoolFactory.PoolTypes.HIKARICP,
                      "D:\\Java\\EzMenu_Workspace\\net.bobs.own.db.h2\\db\\testa", 
                      "sa", null, "10", "cptestb.hikari");

      IH2ConnectionPool pool2 = H2ConnectionPoolFactory.getInstance()
            .makePool(H2ConnectionPoolFactory.PoolTypes.HIKARICP, 
                      "D:\\Java\\EzMenu_Workspace\\net.bobs.own.db.h2\\db\\testb", 
                      "testbUser", "Abcd1234", "10", "cptestb2.hikari");
      
      try {
      Connection connPool = pool.getConnection();
      Connection connPoola = pool.getConnection();
      Assertions.assertNotNull(connPool,"connPool connection is NULL");
      Assertions.assertNotNull(connPoola,"connPoola connection is NULL");
      pool.releaseConnection(connPool);
      pool.releaseConnection(connPoola);
      pool.closePool();
      
      Connection connPool2 = pool2.getConnection();
      Assertions.assertNotNull(connPool2,"connPool2 connection is NULL");
      Connection connPool2a = pool2.getConnection();
      Assertions.assertNotNull(connPool2a,"connPool2a connection is NULL");
      pool2.releaseConnection(connPool2);
      pool2.releaseConnection(connPool2a);
      pool2.closePool();
      } catch (SQLException sqlex) {
      logger.error(sqlex.getMessage(), sqlex);
      }
      
   }
   

}
